#version 430 core
layout (location = 1) in vec2 in_t;
out vec4 out_c;

uniform vec2 points[512];
uniform ivec2 contours[256];
uniform int contour_count;

float dist_point_line(vec2 l0, vec2 l1, vec2 p) {
    vec2 v0 = p - l0;
    vec2 v1 = l1 - l0;
    float u = clamp(dot(v0, v1) / dot(v1, v1), 0, 1);
    return length(p - (l0 + v1 * u));
}

vec2 bezier(vec2 v0, vec2 v1, vec2 v2, float t) {
    float ti = 1.0 - t;
    return ti * ti * v0 + 2.0 * ti * t * v1 + t * t * v2;
}

float cross(vec2 v0, vec2 v1) {
    return v0.x * v1.y - v0.y * v1.x;
}
float ang(vec2 v1, vec2 v2) {
	return atan(v1.x * v2.y - v1.y * v2.x, v1.x * v2.x + v1.y * v2.y);
}
const int curve_seg_count = 10;
float cur_dist = 1000.0;
float cur_ang = 0.0;
void apply_dist(vec2 a, vec2 b, vec2 c, float d) {
	cur_ang += ang(c - a, b - a);
	if (d > cur_dist) return;
    cur_dist = d;
}

void main() {
	for (int i = 0; i < contour_count; ++i) {
		int point = contours[i][0];
		int curve_count = contours[i][1];
		vec2 p0 = points[point]; ++point;
		for (int j = 0; j < curve_count; ++j) {
			vec2 p1 = points[point]; ++point;
			vec2 p2 = points[point]; ++point;
			/*
			float d = dist_point_line(p0, p1, in_t);
			apply_dist(in_t, p0, p1, d);
			d = dist_point_line(p1, p2, in_t);
			apply_dist(in_t, p1, p2, d);
			//*/
			//*
			vec2 a = p0;
			for (int c = 1; c < curve_seg_count; ++c) {
				float t = float(c) / float(curve_seg_count - 1);
				vec2 b = bezier(p0, p1, p2, t);
				float d = dist_point_line(a, b, in_t);
				apply_dist(in_t, a, b, d);
				a = b;
			}
			//*/
			p0 = p2;
		}
	}
	float s = cur_ang >= 3.14 ? -1.0 : 1.0;
    float d = s * cur_dist;
	d = d * 0.5 + 0.5;
	d = smoothstep(0.50, 0.495, d);
    //d = abs(d);
    //d = s;
    out_c = vec4(d, d, d, 1);
    //out_c = vec4(in_t.xy, 0, 1);
} 
